= render :partial => 'layouts/nav_history'
%header.page-header
  %h1.deployments
    = _('%s Pool') % @deployment.pool.name

%section.content-section.deployments.launch-time-params
  %h2= _('Configure launch-time parameters for your Deployment:')
  = form_for @deployment, :url => overview_deployments_path, :html => {:method => :post, :class => "generic horizontal"} do
    = hidden_field :deployment, :name
    = hidden_field :deployment, :pool_id
    = hidden_field :deployment, :frontend_realm_id
    = hidden_field_tag :deployable_id, params[:deployable_id]

    %section.services
      .labels
        - @services.each do |service, assembly_name|
          %h4.service{:id => service.name}= service.name.titleize
          %p.hidden.description= service.description

      %header
        %h3.service
        %p.description

      .params-container
        - @services.each do |service, assembly_name|
          .parameters{:id => service.name}
            - service.parameters.each do |parameter|
              .parameter.field
                - if not parameter.reference?
                  - id = "deployment[launch_parameters][#{assembly_name}][#{service.name}][#{parameter.name}]"
                  = label_tag id, parameter.name.titleize + ':'
                  - value = get_hash_multi(params, [:deployment, :launch_parameters, assembly_name, service.name, parameter.name])
                  - if parameter.type == "password"
                    = password_field_tag id, (parameter.value or value)
                  - elsif (parameter.value or value).to_s.include?("\n")
                    .input
                      = text_area_tag id, (parameter.value or value), :class => 'long'
                  - else
                    .input
                      = text_field_tag id, (parameter.value or value)
                - else
                  = _('Reference to %s\'s return parameter: %s') % [parameter.reference_assembly, parameter.reference_parameter]

      #service-headers

    = submit_tag _('Finalize'), :class => 'button primary', :id => 'submit_params'

:javascript
  function checkEnteredParams() {
    var allFilled = true;
    $('.launch-time-params .parameters').each(function() {
      var $parameters = $(this).find('.parameter input');
      var filledOut = _.all($parameters, function(item) {
        return ! _.isEmpty($(item).val());
      });
      var param_id = $(this).attr('id');
      if (!filledOut) allFilled = false;
      $('.labels').find('#' + param_id).toggleClass('filled-out', filledOut);
    });
    $('#submit_params').toggleClass('disable', !allFilled).attr('disabled', !allFilled);
  };

  (function () {
    function selectService($service) {
      var old_param_id = $('.service.selected').attr('id');
      $('div.params-container').find('#' + old_param_id).hide();
      $('.service.selected').removeClass('selected');

      $service.addClass('selected');
      var new_param_id = $service.attr('id');
      $('div.params-container').find('#' + new_param_id).show();

      $service.parents('.services').find('header .service').text($service.text());
      $service.parents('.services').find('header .description')
          .text($service.next('.description').text());
    }

    var $services = $('.launch-time-params .services .labels h4.service');
    selectService($services.first());
    $services.live('click', function(e) { selectService($(this)); });

    $('#submit_params').attr('disabled', true);
    $('.parameter input').live('keyup mouseup paste', function(e) {
      setTimeout("checkEnteredParams()", 10)
    });
    checkEnteredParams();
  })();
